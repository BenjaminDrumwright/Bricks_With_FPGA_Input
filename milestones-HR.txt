Harrison Reaves

Rubric:

1. Convolution Module (VHDL) Pts 8, correct implementation of sliding window, weight application, and summation
2. ReLU activation module Pts 4, proper logic to zero negative values
3. Fully connected layer module Pts 6, matrix vector multiply with bias, produces accurate classification logits
4. UART Communication (FPGA side) Pts 4, takes in patch data from Pi and sends classification results back
5. Raspberry Pi Image Script Pts 6, converts image, extracts patches and sends over UART
6. System integration and testing Pts 8, all components function together correctly, and classification works
Total Points /40

Time Log:

3/26 VHDL Review - 1.5 hours
3/28 VHDL Review - 1 hour 
3/30 Wrote code and constraints for FPGA input via UART (#4) - 2 hours
3/31 Synthesized and tested code - 1 hour

Summary:

This challenge went well. I was able to spend lots of time reviewing VHDL and learning to use the UART constraints. I wrote compilable VHDL code
that recieves the processed image from the Raspberry Pi via UART. It wasn't all that difficult to do once I learned 
how UART worked, but the process of debugging VHDL code is very time consuming and in this particular case, somewhat difficult to test without a way to
see the full image recieved by the FPGA. Now we can start working on building the nuerons that will run in the FPGA to classify the recieved image.

Github link:

https://github.com/BenjaminDrumwright/Custom-VHDL-Neural-Network-for-Image-Recognition-on-FPGA

My code :
fpgaUART.vhd

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity uart_receiver is
    Port ( clk        : in  STD_LOGIC;
           rst        : in  STD_LOGIC;
           rx         : in  STD_LOGIC;  -- UART RX (receive line)
           data_out   : out STD_LOGIC_VECTOR(7 downto 0); -- received byte
           prediction : out STD_LOGIC_VECTOR(7 downto 0) -- optional prediction output
           );
end uart_receiver;

architecture Behavioral of uart_receiver is
    signal rx_data    : STD_LOGIC_VECTOR(7 downto 0);  -- holds received byte
    signal rx_buffer  : STD_LOGIC_VECTOR(7 downto 0);  -- temporary storage for bytes
    signal uart_ready : STD_LOGIC := '0';              -- flag for ready signal
    signal byte_count : integer range 0 to 255 := 0;   -- simple byte counter
begin
    -- UART reception logic (simplified, requires UART receiver module)
    uart_rx : process(clk, rst)
    begin
        if rst = '1' then
            rx_data <= (others => '0');
            byte_count <= 0;
            uart_ready <= '0';
        elsif rising_edge(clk) then
            -- Wait for new data and collect byte-by-byte
            if rx = '1' then
                rx_data <= rx_buffer;
                byte_count <= byte_count + 1;
                uart_ready <= '1';
            end if;

            -- After receiving a full patch, you could process and output predictions here
            if byte_count = 1024 then  -- example: full patch received (32x32 = 1024 bytes)
                -- Process image data or make a prediction
                byte_count <= 0;
                uart_ready <= '0';  -- reset to receive next data
            end if;
        end if;
    end process;

end Behavioral;
